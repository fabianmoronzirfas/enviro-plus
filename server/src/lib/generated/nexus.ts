/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context";

declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, "crud">;
    model: NexusPrisma<TypeName, "model">;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CollectorCreateInput: {
    // input type
    createdAt?: any | null; // DateTime
    description?: string | null; // String
    name: string; // String!
    records?: NexusGenInputs["RecordCreateManyWithoutCollectorInput"] | null; // RecordCreateManyWithoutCollectorInput
  };
  CollectorCreateOneWithoutRecordsInput: {
    // input type
    connect?: NexusGenInputs["CollectorWhereUniqueInput"] | null; // CollectorWhereUniqueInput
    create?: NexusGenInputs["CollectorCreateWithoutRecordsInput"] | null; // CollectorCreateWithoutRecordsInput
  };
  CollectorCreateWithoutRecordsInput: {
    // input type
    createdAt?: any | null; // DateTime
    description?: string | null; // String
    name: string; // String!
  };
  CollectorWhereUniqueInput: {
    // input type
    id?: number | null; // Int
  };
  RecordCreateInput: {
    // input type
    collector: NexusGenInputs["CollectorCreateOneWithoutRecordsInput"]; // CollectorCreateOneWithoutRecordsInput!
    createdAt?: any | null; // DateTime
    humidity?: number | null; // Float
    light?: number | null; // Float
    nh3?: number | null; // Float
    noise?: number | null; // Float
    oxidising?: number | null; // Float
    pm1?: number | null; // Float
    pm10?: number | null; // Float
    pm2_5?: number | null; // Float
    pressure?: number | null; // Float
    reducing?: number | null; // Float
    temperature?: number | null; // Float
  };
  RecordCreateManyWithoutCollectorInput: {
    // input type
    connect?: NexusGenInputs["RecordWhereUniqueInput"][] | null; // [RecordWhereUniqueInput!]
    create?: NexusGenInputs["RecordCreateWithoutCollectorInput"][] | null; // [RecordCreateWithoutCollectorInput!]
  };
  RecordCreateWithoutCollectorInput: {
    // input type
    createdAt?: any | null; // DateTime
    humidity?: number | null; // Float
    light?: number | null; // Float
    nh3?: number | null; // Float
    noise?: number | null; // Float
    oxidising?: number | null; // Float
    pm1?: number | null; // Float
    pm10?: number | null; // Float
    pm2_5?: number | null; // Float
    pressure?: number | null; // Float
    reducing?: number | null; // Float
    temperature?: number | null; // Float
  };
  RecordWhereUniqueInput: {
    // input type
    id?: number | null; // Int
  };
}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  Collector: {
    // root type
    description?: string | null; // String
    id: number; // Int!
    name: string; // String!
  };
  Mutation: {};
  Query: {};
  Record: {
    // root type
    collectorId: number; // Int!
    humidity?: number | null; // Float
    id: number; // Int!
    light?: number | null; // Float
    nh3?: number | null; // Float
    noise?: number | null; // Float
    oxidising?: number | null; // Float
    pm1?: number | null; // Float
    pm10?: number | null; // Float
    pm2_5?: number | null; // Float
    pressure?: number | null; // Float
    reducing?: number | null; // Float
    temperature?: number | null; // Float
  };
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CollectorCreateInput: NexusGenInputs["CollectorCreateInput"];
  CollectorCreateOneWithoutRecordsInput: NexusGenInputs["CollectorCreateOneWithoutRecordsInput"];
  CollectorCreateWithoutRecordsInput: NexusGenInputs["CollectorCreateWithoutRecordsInput"];
  CollectorWhereUniqueInput: NexusGenInputs["CollectorWhereUniqueInput"];
  RecordCreateInput: NexusGenInputs["RecordCreateInput"];
  RecordCreateManyWithoutCollectorInput: NexusGenInputs["RecordCreateManyWithoutCollectorInput"];
  RecordCreateWithoutCollectorInput: NexusGenInputs["RecordCreateWithoutCollectorInput"];
  RecordWhereUniqueInput: NexusGenInputs["RecordWhereUniqueInput"];
}

export interface NexusGenFieldTypes {
  Collector: {
    // field return type
    description: string | null; // String
    id: number; // Int!
    name: string; // String!
    records: NexusGenRootTypes["Record"][]; // [Record!]!
  };
  Mutation: {
    // field return type
    insertCollector: NexusGenRootTypes["Collector"]; // Collector!
    insertRecord: NexusGenRootTypes["Record"]; // Record!
  };
  Query: {
    // field return type
    collector: NexusGenRootTypes["Collector"] | null; // Collector
    collectors: NexusGenRootTypes["Collector"][]; // [Collector!]!
    info: string; // String!
    record: NexusGenRootTypes["Record"] | null; // Record
    records: NexusGenRootTypes["Record"][]; // [Record!]!
  };
  Record: {
    // field return type
    collector: NexusGenRootTypes["Collector"]; // Collector!
    collectorId: number; // Int!
    humidity: number | null; // Float
    id: number; // Int!
    light: number | null; // Float
    nh3: number | null; // Float
    noise: number | null; // Float
    oxidising: number | null; // Float
    pm1: number | null; // Float
    pm10: number | null; // Float
    pm2_5: number | null; // Float
    pressure: number | null; // Float
    reducing: number | null; // Float
    temperature: number | null; // Float
  };
}

export interface NexusGenArgTypes {
  Collector: {
    records: {
      // args
      after?: NexusGenInputs["RecordWhereUniqueInput"] | null; // RecordWhereUniqueInput
      before?: NexusGenInputs["RecordWhereUniqueInput"] | null; // RecordWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    };
  };
  Mutation: {
    insertCollector: {
      // args
      data: NexusGenInputs["CollectorCreateInput"]; // CollectorCreateInput!
    };
    insertRecord: {
      // args
      data: NexusGenInputs["RecordCreateInput"]; // RecordCreateInput!
    };
  };
  Query: {
    collector: {
      // args
      where: NexusGenInputs["CollectorWhereUniqueInput"]; // CollectorWhereUniqueInput!
    };
    record: {
      // args
      where: NexusGenInputs["RecordWhereUniqueInput"]; // RecordWhereUniqueInput!
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Collector" | "Mutation" | "Query" | "Record";

export type NexusGenInputNames =
  | "CollectorCreateInput"
  | "CollectorCreateOneWithoutRecordsInput"
  | "CollectorCreateWithoutRecordsInput"
  | "CollectorWhereUniqueInput"
  | "RecordCreateInput"
  | "RecordCreateManyWithoutCollectorInput"
  | "RecordCreateWithoutCollectorInput"
  | "RecordWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames =
  | "Boolean"
  | "DateTime"
  | "Float"
  | "ID"
  | "Int"
  | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
